# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if not head:
            return head

        length, tail = 1, head #length is 1 because we have 1 node to start off with

        while tail.next:
            tail = tail.next
            length +=1
        k = k%length
        if k == 0:
            return head
        #Move to pivot and do the needed rotation

        cur = head
        for i in range(length -k -1):
            cur = cur.next
        newHead = cur.next
        cur.next = None
        tail.next = head
        return newHead
        
