class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        stack=[]
        res=[]
        #Doing backtracking or DFS (recursively)
        def backtrack(openN,closedN):
            if openN==closedN==n:
                res.append("".join(stack)) #seperate all the answers in the array
                return
            if openN < n:
                stack.append("(")
                backtrack(openN+1,closedN)
                stack.pop() #this is needed to go other option in the decision tree
            if closedN<openN:
                stack.append(")")
                backtrack(openN,closedN+1)
                stack.pop()

        backtrack(0,0) #intial case starts at 0 for both
        return res
            
